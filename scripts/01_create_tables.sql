-- Market Intelligence Dashboard Database Schema

-- Users table for authentication
CREATE TABLE IF NOT EXISTS users (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255),
    avatar_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Data sources configuration
CREATE TABLE IF NOT EXISTS data_sources (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(100) NOT NULL, -- 'api', 'database', 'file', etc.
    config JSONB NOT NULL, -- Store API keys, connection strings, etc.
    status VARCHAR(50) DEFAULT 'inactive', -- 'active', 'inactive', 'error', 'testing'
    last_sync TIMESTAMP WITH TIME ZONE,
    last_tested_at TIMESTAMP WITH TIME ZONE, -- New field for last test time
    last_test_error TEXT, -- New field for storing last test error message
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Market analysis reports
CREATE TABLE IF NOT EXISTS reports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    market_domain VARCHAR(255) NOT NULL,
    query_text TEXT,
    status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'processing', 'completed', 'failed'
    report_data JSONB,
    file_path TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- KPI metrics for dashboard
CREATE TABLE IF NOT EXISTS kpi_metrics (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    metric_name VARCHAR(255) NOT NULL,
    metric_value DECIMAL(15,2),
    metric_unit VARCHAR(50),
    change_percentage DECIMAL(5,2), -- Percentage change from the previous period
    period_start TIMESTAMP WITH TIME ZONE, -- Start of the period this metric value represents
    period_end TIMESTAMP WITH TIME ZONE, -- End of the period this metric value represents
    recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), -- When this specific KPI record was created/updated
    details JSONB -- Optional field for additional context or breakdown
);

-- Unique constraint for upserting: a given metric for a user (or global if user_id is NULL) for a specific period_end should be unique.
CREATE UNIQUE INDEX IF NOT EXISTS idx_kpi_metrics_name_period_user ON kpi_metrics(metric_name, period_end, user_id) WHERE user_id IS NOT NULL;
CREATE UNIQUE INDEX IF NOT EXISTS idx_kpi_metrics_name_period_global ON kpi_metrics(metric_name, period_end) WHERE user_id IS NULL;

-- Uploaded/Synced Documents (Used by /api/upload and data source sync)
CREATE TABLE IF NOT EXISTS documents (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    uploader_id UUID REFERENCES users(id) ON DELETE CASCADE, -- User who uploaded or owns the source for synced data
    source_id UUID REFERENCES data_sources(id) ON DELETE SET NULL, -- Link to data_sources if synced from a source
    filename VARCHAR(255) NOT NULL, -- Internal unique filename if stored on disk (e.g., UUID.ext)
    original_filename VARCHAR(255), -- Original name of the uploaded file or derived name for synced content
    file_type VARCHAR(100), -- MIME type
    file_extension VARCHAR(20),
    file_size BIGINT, -- Size in bytes
    status VARCHAR(50) DEFAULT 'uploaded', -- 'uploaded', 'pending_processing', 'processing', 'analyzed', 'processing_failed'
    upload_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(), -- For uploads, or sync time for synced data
    text TEXT, -- Extracted text content
    word_count INTEGER,
    analysis JSONB, -- Results from text_processor.analyze_text_keywords, basic entities, etc.
    text_preview TEXT, -- Short preview of the text
    error_message TEXT, -- If processing failed
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_documents_uploader_id ON documents(uploader_id);
CREATE INDEX IF NOT EXISTS idx_documents_source_id ON documents(source_id);
CREATE INDEX IF NOT EXISTS idx_documents_status ON documents(status);
CREATE INDEX IF NOT EXISTS idx_documents_file_extension ON documents(file_extension);

-- Document Insights (Generated by agent_logic.py for specific documents)
CREATE TABLE IF NOT EXISTS document_insights (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    document_id UUID REFERENCES documents(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE, -- User who requested the insight generation
    summary TEXT, -- AI-generated summary
    insights_data JSONB, -- More structured insights (e.g., key points, sentiment, topics)
    generated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_document_insights_document_id ON document_insights(document_id);
CREATE INDEX IF NOT EXISTS idx_document_insights_user_id ON document_insights(user_id);


-- Market trends data
CREATE TABLE IF NOT EXISTS market_trends (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    trend_name VARCHAR(255) NOT NULL,
    market_domain VARCHAR(255),
    trend_data JSONB NOT NULL,
    confidence_score DECIMAL(3,2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Competitor analysis data
CREATE TABLE IF NOT EXISTS competitors (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    company_name VARCHAR(255) NOT NULL,
    market_domain VARCHAR(255),
    market_share DECIMAL(5,2),
    competitor_data JSONB,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_data_sources_user_id ON data_sources(user_id);
CREATE INDEX IF NOT EXISTS idx_reports_user_id ON reports(user_id);
CREATE INDEX IF NOT EXISTS idx_kpi_metrics_user_id ON kpi_metrics(user_id);
CREATE INDEX IF NOT EXISTS idx_market_trends_user_id ON market_trends(user_id);
CREATE INDEX IF NOT EXISTS idx_competitors_user_id ON competitors(user_id);
